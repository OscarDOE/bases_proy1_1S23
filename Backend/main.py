from fastapi import FastAPI
import cx_Oracle
import subprocess
import pandas as pd
import csv

app = FastAPI()
app.title = "BASES CONSULTASs"


def dbConnection():
    connection = cx_Oracle.connect("elmco","elmco","myservice")
    connection.autocommit = True
    return connection.cursor()

def dbConnection2():
    connection = cx_Oracle.connect("elmco","elmco","myservice")
    connection.autocommit = True
    return connection

async def cargartemporal():
    filename = 'DB_Excel.csv'
    insert_sql = f"INSERT INTO DB_EXCEL (NOMBRE_VICTIMA,APELLIDO_VICTIMA,DIRECCION_VICTIMA,FECHA_PRIMERA_SOSPECHA,FECHA_CONFIRMACION,FECHA_MUERTE,ESTADO_VICTIMA,NOMBRE_ASOCIADO,APELLIDO_ASOCIADO,FECHA_CONOCIO,CONTACTO_FISICO,FECHA_INICIO_CONTACTO,FECHA_FIN_CONTACTO,NOMBRE_HOSPITAL,DIRECCION_HOSPITAL,UBICACION_VICTIMA,FECHA_LLEGADA,FECHA_RETIRO,TRATAMIENTO,EFECTIVIDAD,FECHA_INICIO_TRATAMIENTO,FECHA_FIN_TRATAMIENTO,EFECTIVIDAD_EN_VICTIMA) VALUES (:1,:2,:3,:4,:5,:6,:7,:8,:9,:10,:11,:12,:13,:14,:15,:16,:17,:18,:19,:20,:21,:22,:23)"
    conexion = dbConnection2()
    cursor = conexion.cursor()
    cursor.execute("CREATE TABLE DB_EXCEL (NOMBRE_VICTIMA VARCHAR(100) ,APELLIDO_VICTIMA VARCHAR(100) ,DIRECCION_VICTIMA VARCHAR(100) ,FECHA_PRIMERA_SOSPECHA VARCHAR(100) ,FECHA_CONFIRMACION VARCHAR(100) ,FECHA_MUERTE VARCHAR(100) ,ESTADO_VICTIMA VARCHAR(100) ,NOMBRE_ASOCIADO VARCHAR(100) ,APELLIDO_ASOCIADO VARCHAR(100) ,FECHA_CONOCIO VARCHAR(100) ,CONTACTO_FISICO VARCHAR(100) ,FECHA_INICIO_CONTACTO VARCHAR(100) ,FECHA_FIN_CONTACTO VARCHAR(100) ,NOMBRE_HOSPITAL VARCHAR(100) ,DIRECCION_HOSPITAL VARCHAR(100) ,UBICACION_VICTIMA VARCHAR(100) ,FECHA_LLEGADA VARCHAR(100) ,FECHA_RETIRO VARCHAR(100) ,TRATAMIENTO VARCHAR(100) ,EFECTIVIDAD INTEGER,FECHA_INICIO_TRATAMIENTO VARCHAR(100) ,FECHA_FIN_TRATAMIENTO VARCHAR(100) ,EFECTIVIDAD_EN_VICTIMA INTEGER)")
    try:
        print("ANTES")
        with open(filename,'r',encoding='utf-8') as csvfile:
            reader = csv.reader(csvfile,delimiter=";",lineterminator="\n")
            next(reader)
            data = [tuple(row) for row in reader]
            print(data[0])
        cursor.executemany(insert_sql,data)
        conexion.commit()
        cursor.close()
        csvfile.close()
        conexion.close()
    except KeyError as e :
        print(e)

async def cargar_independientes():
    conexion = dbConnection2()
    cursor = conexion.cursor()
    cursor.execute("CREATE TABLE estado(\
	id INTEGER generated by default as IDENTITY PRIMARY KEY  NOT NULL ,\
	descripcion VARCHAR2(50) NOT NULL\
    )")
    cursor.execute("INSERT INTO estado(descripcion)\
    SELECT DISTINCT ESTADO_VICTIMA \
    FROM DB_EXCEL\
    WHERE ESTADO_VICTIMA IS NOT NULL ")

    cursor.execute("CREATE TABLE victimas(\
	id INTEGER generated by default as IDENTITY PRIMARY KEY  NOT NULL,\
	nombre VARCHAR2(50) NOT NULL,\
	apellido VARCHAR2(50) NOT NULL,\
	direccion VARCHAR2(50) NOT NULL,\
	fecha_primera_sospecha DATE NOT NULL,\
	fecha_confirmacion DATE NOT NULL,\
	fecha_muerte DATE,\
	idestado INTEGER NOT NULL,\
	FOREIGN KEY (idestado) REFERENCES estado(id)\
)")
    cursor.execute("INSERT INTO victimas(nombre,apellido,direccion,fecha_primera_sospecha,fecha_confirmacion,fecha_muerte,idestado)SELECT DISTINCT DB_EXCEL.NOMBRE_VICTIMA,DB_EXCEL.APELLIDO_VICTIMA,DB_EXCEL.DIRECCION_VICTIMA,TO_DATE(DB_EXCEL.FECHA_PRIMERA_SOSPECHA,'DD/MM/YYYY HH24:MI'),TO_DATE(DB_EXCEL.FECHA_CONFIRMACION,'DD/MM/YYYY HH24:MI'),TO_DATE(DB_EXCEL.FECHA_MUERTE,'DD/MM/YYYY HH24:MI'),ESTADO.ID\
    FROM DB_EXCEL \
    INNER JOIN ESTADO\
        ON DB_EXCEL.ESTADO_VICTIMA = estado.DESCRIPCION \
    WHERE NOMBRE_VICTIMA IS NOT NULL AND APELLIDO_VICTIMA IS NOT NULL\
    AND DIRECCION_VICTIMA IS NOT NULL AND FECHA_PRIMERA_SOSPECHA IS NOT NULL \
    AND FECHA_CONFIRMACION IS NOT NULL")

    cursor.execute("CREATE TABLE hospitales(\
        id INTEGER generated by default as IDENTITY PRIMARY KEY  NOT NULL,\
        nombre VARCHAR2(50) NOT NULL,\
        direccion VARCHAR2(50) NOT NULL\
    )")
    cursor.execute("INSERT INTO hospitales(nombre, direccion) SELECT DISTINCT NOMBRE_HOSPITAL,DIRECCION_HOSPITAL\
    FROM DB_EXCEL\
    WHERE NOMBRE_HOSPITAL IS NOT NULL AND DIRECCION_HOSPITAL IS NOT NULL")

    cursor.execute("CREATE TABLE ubicaciones(\
	id INTEGER generated by default as IDENTITY PRIMARY KEY  NOT NULL,\
	direccion VARCHAR2(50) NOT NULL\
    )")
    cursor.execute("INSERT INTO ubicaciones(direccion) SELECT DISTINCT UBICACION_VICTIMA FROM DB_EXCEL WHERE UBICACION_VICTIMA IS NOT NULL")

    cursor.execute("CREATE TABLE tratamientos(\
	id INTEGER generated by default as IDENTITY PRIMARY KEY  NOT NULL,\
	nombre VARCHAR2(50) NOT NULL,\
	efectividad INTEGER NOT NULL\
)")
    cursor.execute("INSERT INTO tratamientos(nombre,efectividad)SELECT DISTINCT TRATAMIENTO,EFECTIVIDAD FROM DB_EXCEL WHERE TRATAMIENTO IS NOT NULL AND EFECTIVIDAD IS NOT NULL")

    cursor.execute("CREATE TABLE tipos_contacto(\
	id INTEGER generated by default as IDENTITY PRIMARY KEY  NOT NULL,\
	descripcion VARCHAR2(100) NOT NULL\
)")
    cursor.execute("INSERT INTO tipos_contacto(descripcion)SELECT DISTINCT CONTACTO_FISICO FROM DB_EXCEL WHERE CONTACTO_FISICO IS NOT NULL")

    cursor.execute("CREATE TABLE asociados(\
	id INTEGER generated by default as IDENTITY PRIMARY KEY  NOT NULL,\
	nombre VARCHAR2(50) NOT NULL,\
	apellido VARCHAR2(50) NOT NULL\
)")
    cursor.execute("INSERT INTO asociados(nombre,apellido)SELECT DISTINCT NOMBRE_ASOCIADO,APELLIDO_ASOCIADO FROM DB_EXCEL WHERE NOMBRE_ASOCIADO IS NOT NULL AND APELLIDO_ASOCIADO IS NOT NULL")
    cursor.close()
    conexion.close()

async def cargar_foraneas():
    conexion = dbConnection2()
    cursor = conexion.cursor()
    cursor.execute("CREATE TABLE reg_victima_hospital(\
	id INTEGER generated by default as IDENTITY PRIMARY KEY  NOT NULL,\
	idvictima INTEGER NOT NULL,\
	idhospital INTEGER NOT NULL,\
	FOREIGN KEY (idvictima) REFERENCES victimas(id),\
	FOREIGN KEY (idhospital) REFERENCES hospitales(id)\
)")
    cursor.execute("INSERT INTO reg_victima_hospital(idvictima,idhospital) SELECT DISTINCT victimas.ID,hospitales.ID FROM DB_EXCEL INNER JOIN HOSPITALES ON DB_EXCEL.NOMBRE_HOSPITAL = HOSPITALES.NOMBRE AND DB_EXCEL.DIRECCION_HOSPITAL = HOSPITALES.DIRECCION INNER JOIN VICTIMAS	ON DB_EXCEL.NOMBRE_VICTIMA = victimas.nombre AND DB_EXCEL.APELLIDO_VICTIMA = VICTIMAS.APELLIDO")

    cursor.execute("CREATE TABLE ubicacion_victima(\
	id INTEGER generated by default as IDENTITY PRIMARY KEY  NOT NULL,\
	fecha_llegada DATE NOT NULL,\
	fecha_retiro DATE NOT NULL,\
	idvictima INTEGER NOT NULL,\
	idubicacion INTEGER NOT NULL,\
	FOREIGN KEY (idvictima) REFERENCES victimas(id),\
	FOREIGN KEY (idubicacion) REFERENCES ubicaciones(id)\
)")
    cursor.execute("INSERT INTO UBICACION_VICTIMA (FECHA_LLEGADA,FECHA_RETIRO,IDVICTIMA,IDUBICACION) SELECT DISTINCT TO_DATE(DB_EXCEL.FECHA_LLEGADA,'DD/MM/YYYY HH24:MI'), TO_DATE(DB_EXCEL.FECHA_RETIRO,'DD/MM/YYYY HH24:MI'), VICTIMAS.ID,UBICACIONES.ID FROM DB_EXCEL INNER JOIN VICTIMAS ON DB_EXCEL.NOMBRE_VICTIMA = VICTIMAS.NOMBRE AND DB_EXCEL.APELLIDO_VICTIMA =VICTIMAS.APELLIDO INNER JOIN UBICACIONES ON DB_EXCEL.UBICACION_VICTIMA = UBICACIONES.DIRECCION")

    cursor.execute("CREATE TABLE tratamiento_victima(\
	id INTEGER generated by default as IDENTITY PRIMARY KEY  NOT NULL,\
	fecha_inicio DATE NOT NULL,\
	fecha_fin DATE NOT NULL,\
	efectividad_en_victima INTEGER NOT NULL,\
	idvictima INTEGER NOT NULL,\
	idtratamiento INTEGER NOT NULL,\
	FOREIGN KEY (idvictima) REFERENCES victimas(id),\
	FOREIGN KEY (idtratamiento) REFERENCES tratamientos(id)\
)")
    cursor.execute("INSERT INTO TRATAMIENTO_VICTIMA (FECHA_INICIO,FECHA_FIN,EFECTIVIDAD_EN_VICTIMA,IDVICTIMA,IDTRATAMIENTO) SELECT DISTINCT TO_DATE(DB_EXCEL.FECHA_INICIO_TRATAMIENTO,'DD/MM/YYYY HH24:MI'), TO_DATE(DB_EXCEL.FECHA_FIN_TRATAMIENTO,'DD/MM/YYYY HH24:MI'), DB_EXCEL.EFECTIVIDAD_EN_VICTIMA, VICTIMAS.ID,TRATAMIENTOS.ID FROM DB_EXCEL INNER JOIN VICTIMAS ON DB_EXCEL.NOMBRE_VICTIMA = VICTIMAS.NOMBRE AND DB_EXCEL.APELLIDO_VICTIMA =VICTIMAS.APELLIDO INNER JOIN TRATAMIENTOS ON DB_EXCEL.TRATAMIENTO = TRATAMIENTOS.NOMBRE")

    cursor.execute("CREATE TABLE registro_asociado(\
	id INTEGER generated by default as IDENTITY PRIMARY KEY  NOT NULL,\
	fecha_conocio DATE NOT NULL,\
	idasociado INTEGER NOT NULL,\
	idvictima INTEGER NOT NULL,\
	FOREIGN KEY (idasociado) REFERENCES asociados(id),\
	FOREIGN KEY (idvictima) REFERENCES victimas(id)	\
)")
    cursor.execute("INSERT INTO REGISTRO_ASOCIADO (FECHA_CONOCIO,IDASOCIADO,IDVICTIMA) SELECT DISTINCT TO_DATE(DB_EXCEL.FECHA_CONOCIO,'DD/MM/YYYY HH24:MI'), ASOCIADOS.ID ,VICTIMAS.ID  FROM DB_EXCEL INNER JOIN ASOCIADOS ON DB_EXCEL.NOMBRE_ASOCIADO = ASOCIADOS.NOMBRE AND DB_EXCEL.APELLIDO_ASOCIADO = ASOCIADOS.APELLIDO INNER JOIN VICTIMAS ON DB_EXCEL.NOMBRE_VICTIMA = VICTIMAS.NOMBRE AND DB_EXCEL.APELLIDO_VICTIMA  = VICTIMAS.APELLIDO ")

    cursor.execute("CREATE TABLE registro_contacto(\
	id INTEGER generated by default as IDENTITY PRIMARY KEY  NOT NULL,\
	fecha_inicio DATE NOT NULL,\
	fecha_fin DATE NOT NULL,\
	idcontacto INTEGER NOT NULL,\
	idregistro INTEGER NOT NULL,\
	FOREIGN KEY (idcontacto) REFERENCES tipos_contacto(id),\
	FOREIGN KEY (idregistro) REFERENCES registro_asociado(id)\
)")
    cursor.execute("INSERT INTO REGISTRO_CONTACTO (fecha_inicio,FECHA_FIN,IDCONTACTO,IDREGISTRO) SELECT DISTINCT TO_DATE(FECHA_INICIO_CONTACTO,'DD/MM/YYYY HH24:MI' ),  TO_DATE(FECHA_FIN_CONTACTO,'DD/MM/YYYY HH24:MI' ), TIPOS_CONTACTO.ID, REGISTRO_ASOCIADO.ID FROM DB_EXCEL INNER JOIN VICTIMAS ON VICTIMAS.NOMBRE = DB_EXCEL.NOMBRE_VICTIMA AND VICTIMAS.APELLIDO = DB_EXCEL.APELLIDO_VICTIMA  INNER JOIN ASOCIADOS ON ASOCIADOS.NOMBRE = DB_EXCEL.NOMBRE_ASOCIADO AND ASOCIADOS.APELLIDO = DB_EXCEL.APELLIDO_ASOCIADO  INNER JOIN TIPOS_CONTACTO ON TIPOS_CONTACTO.DESCRIPCION  = DB_EXCEL.CONTACTO_FISICO INNER JOIN REGISTRO_ASOCIADO ON REGISTRO_ASOCIADO.IDVICTIMA = VICTIMAS.ID AND REGISTRO_ASOCIADO.IDASOCIADO = ASOCIADOS.ID")
    cursor.close()
    conexion.close()

@app.get("/")
async def root():
    return {"messassge":"Hello World"}


@app.get("/consulta1")
async def root():
    conexion = dbConnection()
    conexion.execute("SELECT HOSPITALES.NOMBRE ,HOSPITALES.DIRECCION ,\
    COUNT(VICTIMAS.FECHA_MUERTE) \
        FROM HOSPITALES\
        INNER JOIN REG_VICTIMA_HOSPITAL\
        ON HOSPITALES.ID = REG_VICTIMA_HOSPITAL.IDHOSPITAL  \
        INNER JOIN VICTIMAS \
        ON VICTIMAS.ID = REG_VICTIMA_HOSPITAL.IDVICTIMA \
        WHERE VICTIMAS.FECHA_MUERTE IS NOT NULL\
        GROUP BY HOSPITALES.NOMBRE ,HOSPITALES.DIRECCION")
    resultado = conexion.fetchall()
    conexion.close()
    return {"message":resultado}

@app.get("/consulta2")
async def root():
    conexion = dbConnection()
    conexion.execute("SELECT VICTIMAS.NOMBRE, VICTIMAS.APELLIDO \
        FROM VICTIMAS\
        INNER JOIN TRATAMIENTO_VICTIMA \
        ON TRATAMIENTO_VICTIMA.IDVICTIMA = victimas.ID \
        INNER JOIN TRATAMIENTOS\
        ON TRATAMIENTO_VICTIMA.IDTRATAMIENTO = TRATAMIENTOS.ID \
        INNER JOIN ESTADO\
        ON ESTADO.ID = VICTIMAS.IDESTADO \
        WHERE TRATAMIENTOS.NOMBRE = 'Transfusiones de sangre'\
        AND TRATAMIENTO_VICTIMA.EFECTIVIDAD_EN_VICTIMA > 5\
        AND ESTADO.DESCRIPCION = 'En cuarentena'")
    result = conexion.fetchall()
    conexion.close()

    return {"message":result}

@app.get("/consulta3")
async def root():
    conexion = dbConnection()
    conexion.execute("SELECT VICTIMAS.NOMBRE ,VICTIMAS.APELLIDO ,VICTIMAS.DIRECCION,COUNT(REGISTRO_ASOCIADO.ID)\
        FROM VICTIMAS\
        INNER JOIN REGISTRO_ASOCIADO\
        ON REGISTRO_ASOCIADO.IDVICTIMA = VICTIMAS.ID\
        INNER JOIN ASOCIADOS\
        ON ASOCIADOS.ID  = REGISTRO_ASOCIADO.IDASOCIADO \
        INNER JOIN ESTADO\
        ON VICTIMAS.IDESTADO = ESTADO.ID \
        GROUP BY VICTIMAS.NOMBRE,VICTIMAS.APELLIDO ,VICTIMAS.DIRECCION ,\
        VICTIMAS.FECHA_MUERTE ,ESTADO.DESCRIPCION \
        HAVING COUNT( DISTINCT REGISTRO_ASOCIADO.IDASOCIADO) > 3     \
        AND (ESTADO.DESCRIPCION = 'Muerte' OR VICTIMAS.FECHA_MUERTE IS NOT NULL)") 
    result = conexion.fetchall()
    conexion.close()

    return {"message":result}

@app.get("/consulta4")
async def root():
    conexion = dbConnection()
    conexion.execute("SELECT VICTIMAS.NOMBRE ,VICTIMAS.APELLIDO\
        FROM VICTIMAS\
        INNER JOIN REGISTRO_ASOCIADO\
        ON REGISTRO_ASOCIADO.IDVICTIMA = VICTIMAS.ID \
        INNER JOIN REGISTRO_CONTACTO \
        ON REGISTRO_CONTACTO.IDREGISTRO = REGISTRO_ASOCIADO.ID \
        INNER JOIN TIPOS_CONTACTO\
        ON TIPOS_CONTACTO.ID = REGISTRO_CONTACTO.IDCONTACTO \
        WHERE VICTIMAS.IDESTADO = (SELECT ID FROM ESTADO WHERE DESCRIPCION = 'Suspendida')\
        AND TIPOS_CONTACTO.DESCRIPCION = 'Beso'\
        GROUP BY VICTIMAS.NOMBRE ,VICTIMAS.APELLIDO \
        HAVING COUNT(DISTINCT REGISTRO_ASOCIADO.IDASOCIADO) > 2")
    result = conexion.fetchall()
    conexion.close()

    return {"message":result}

@app.get("/consulta5")
async def root():
    conexion = dbConnection()
    conexion.execute("SELECT VICTIMAS.NOMBRE ,VICTIMAS.APELLIDO ,COUNT(TRATAMIENTOS.ID) AS total\
        FROM VICTIMAS\
        INNER JOIN TRATAMIENTO_VICTIMA \
        ON TRATAMIENTO_VICTIMA.IDVICTIMA = VICTIMAS.ID \
        INNER JOIN TRATAMIENTOS\
        ON TRATAMIENTOS.ID = TRATAMIENTO_VICTIMA.IDTRATAMIENTO \
        WHERE TRATAMIENTOS.NOMBRE  = 'Oxigeno'\
        GROUP BY  VICTIMAS.NOMBRE ,VICTIMAS.APELLIDO\
        ORDER BY total DESC \
    FETCH FIRST 5 ROWS ONLY")
    result = conexion.fetchall()
    conexion.close()
    return {"message":result}

@app.get("/consulta6")
async def root():
    conexion = dbConnection()
    conexion.execute("SELECT v.NOMBRE,v.APELLIDO ,v.FECHA_MUERTE \
        FROM VICTIMAS v \
        INNER JOIN TRATAMIENTO_VICTIMA tv ON \
        tv.IDVICTIMA = v.ID\
        INNER JOIN TRATAMIENTOS t ON\
        t.ID =tv.IDTRATAMIENTO \
        INNER JOIN REG_VICTIMA_HOSPITAL rvh ON \
        rvh.IDVICTIMA =v.ID \
        INNER JOIN HOSPITALES h ON\
        h.ID  = rvh.IDHOSPITAL \
        WHERE h.DIRECCION = '1987 Delphine Well' \
        AND t.NOMBRE  = 'Manejo de la presion arterial'\
        AND v.FECHA_MUERTE IS NOT NULL \
        UNION \
        SELECT v.NOMBRE,v.APELLIDO ,v.FECHA_MUERTE \
        FROM VICTIMAS v \
        INNER JOIN TRATAMIENTO_VICTIMA tv ON \
        tv.IDVICTIMA = v.ID\
        INNER JOIN TRATAMIENTOS t ON\
        t.ID =tv.IDTRATAMIENTO \
        INNER JOIN UBICACION_VICTIMA uv ON \
        uv.IDVICTIMA = v.ID \
        INNER JOIN UBICACIONES u ON\
        u.ID = uv.IDUBICACION \
        WHERE u.DIRECCION  = '1987 Delphine Well' \
        AND t.NOMBRE  = 'Manejo de la presion arterial'\
        AND v.FECHA_MUERTE IS NOT NULL ")
    result = conexion.fetchall()
    conexion.close()
    return {"message":result}

'''@app.get("/consulta7")
async def root():
    conexion = dbConnection()
    conexion.execute("SELECT V.ID ,v.NOMBRE ,v.APELLIDO ,v.DIRECCION,RVH.IDHOSPITAL,RA.NUM_ALLEGADOS\
        FROM VICTIMAS v \
        INNER JOIN REG_VICTIMA_HOSPITAL rvh ON\
        rvh.IDVICTIMA = v.ID \
        INNER JOIN (SELECT IDVICTIMA ,count(DISTINCT IDASOCIADO) AS NUM_ALLEGADOS \
                    FROM REGISTRO_ASOCIADO \
                    GROUP BY IDVICTIMA) ra ON \
                    ra.IDVICTIMA = v.ID \
        INNER JOIN (SELECT IDVICTIMA, COUNT(DISTINCT IDTRATAMIENTO) AS NUM_TRATAMIENTOS\
                    FROM TRATAMIENTO_VICTIMA \
                    GROUP BY IDVICTIMA) tv ON \
                    tv.IDVICTIMA = v.ID\
        WHERE ra.NUM_ALLEGADOS < 2\
        AND tv.NUM_TRATAMIENTOS = 2\
        AND RVH.IDVICTIMA  = V.ID")
    result = conexion.fetchall()
    conexion.close()
    return {"message":result}'''

@app.get("/consulta7")
async def root():
    conexion = dbConnection()
    conexion.execute("SELECT v.nombre, v.APELLIDO ,v.DIRECCION \
        FROM VICTIMAS v \
        where(SELECT COUNT(*) FROM TRATAMIENTO_VICTIMA tv\
        INNER JOIN TRATAMIENTOS t ON\
        t.id = tv.IDTRATAMIENTO\
        WHERE tv.IDVICTIMA = v.ID) = 2")
    result = conexion.fetchall()
    conexion.close()
    return {"message":result}

@app.get("/consulta8")
async def root():
    conexion = dbConnection()
    conexion.execute("SELECT CASE WHEN EXTRACT(MONTH FROM fecha_primera_sospecha) = 1 THEN '1' WHEN EXTRACT(MONTH FROM fecha_primera_sospecha) = 2 THEN '2' WHEN EXTRACT(MONTH FROM fecha_primera_sospecha) = 3 THEN '3' WHEN EXTRACT(MONTH FROM fecha_primera_sospecha) = 4 THEN '4' WHEN EXTRACT(MONTH FROM fecha_primera_sospecha) = 5 THEN '5' WHEN EXTRACT(MONTH FROM fecha_primera_sospecha) = 6 THEN '6' WHEN EXTRACT(MONTH FROM fecha_primera_sospecha) = 7 THEN '7' WHEN EXTRACT(MONTH FROM fecha_primera_sospecha) = 8 THEN '8' WHEN EXTRACT(MONTH FROM fecha_primera_sospecha) = 9 THEN '9' WHEN EXTRACT(MONTH FROM fecha_primera_sospecha) = 10 THEN '10' WHEN EXTRACT(MONTH FROM fecha_primera_sospecha) = 11 THEN '11' WHEN EXTRACT(MONTH FROM fecha_primera_sospecha) = 12 THEN '12' END AS mes_sospecha,v.nombre,v.apellido,COUNT(DISTINCT tv.idtratamiento) AS num_tratamientos FROM victimas v JOIN tratamiento_victima tv ON v.id = tv.idvictima GROUP BY EXTRACT(MONTH FROM fecha_primera_sospecha),v.nombre,v.apellido HAVING COUNT(DISTINCT tv.idtratamiento) = (SELECT MAX(num_tratamientos) FROM ( SELECT COUNT(DISTINCT tv2.idtratamiento) AS num_tratamientos FROM tratamiento_victima tv2 GROUP BY tv2.idvictima ) )\
    OR COUNT(DISTINCT tv.idtratamiento) = (\
        SELECT MIN(num_tratamientos)\
        FROM (\
            SELECT COUNT(DISTINCT tv3.idtratamiento) AS num_tratamientos\
            FROM tratamiento_victima tv3\
            GROUP BY tv3.idvictima\
        )\
    )")
    result = conexion.fetchall()   
    conexion.close()
    return {"message":result}

@app.get("/consulta9")
async def root():
    conexion = dbConnection()
    conexion.execute("SELECT h.nombre, COUNT(*) as cantidad_victimas, COUNT(*) * 100.0 / SUM(COUNT(*)) OVER() as porcentaje FROM hospitales h JOIN reg_victima_hospital rvh ON h.id = rvh.idhospital JOIN victimas v ON rvh.idvictima = v.id GROUP BY h.id, h.nombre ORDER BY porcentaje DESC")
    result = conexion.fetchall()   
    conexion.close()
    return {"message":result}

@app.get("/consulta10")
async def root():
    conexion = dbConnection()
    conexion.execute("SELECT NOMBRE ,DESCRIPCION ,PORCENTAJE_VICTIMAS FROM (SELECT H.NOMBRE ,TC.dESCRIPCION ,COUNT(*)*100.0/( SELECT DISTINCT COUNT(*) FROM REGISTRO_ASOCIADO ra INNER JOIN VICTIMAS v ON RA.IDVICTIMA = V.ID INNER JOIN REG_VICTIMA_HOSPITAL rvh ON RVH.IDVICTIMA = V.ID INNER JOIN HOSPITALES ho ON RVH.IDHOSPITAL = ho.ID WHERE H.ID = ho.ID ) AS PORCENTAJE_VICTIMAS, ROW_NUMBER () OVER (PARTITION BY H.NOMBRE ORDER BY COUNT(*) DESC) AS N FROM VICTIMAS v2 INNER JOIN REGISTRO_ASOCIADO ra2 ON RA2.IDVICTIMA =V2.ID INNER JOIN REGISTRO_CONTACTO rc ON RC.IDREGISTRO = RA2.ID INNER JOIN TIPOS_CONTACTO tc ON TC.ID = RC.IDCONTACTO INNER JOIN REG_VICTIMA_HOSPITAL rvh2 ON RVH2.IDVICTIMA =V2.ID INNER JOIN HOSPITALES h ON H.ID = RVH2.IDHOSPITAL GROUP BY H.NOMBRE ,TC.DESCRIPCION ,H.ID ) WHERE N = 1 ORDER BY PORCENTAJE_VICTIMAS DESC")
    result = conexion.fetchall()   
    conexion.close()
    return {"message":result}

@app.get("/eliminarTemporal")
async def root():
    conexion = dbConnection()
    conexion.execute("DROP TABLE DB_EXCEL")
    conexion.close()
    return {"message":"Tabla Temporal Eliminada"}

@app.get("/eliminarModelo")
async def root():
    conexion = dbConnection()
    conexion.execute("DROP TABLE ubicacion_victima")
    conexion.execute("DROP TABLE tratamiento_victima")
    conexion.execute("DROP TABLE reg_victima_hospital")
    conexion.execute("DROP TABLE registro_contacto")
    conexion.execute("DROP TABLE registro_asociado")
    conexion.execute("DROP TABLE victimas")
    conexion.execute("DROP TABLE estado")
    conexion.execute("DROP TABLE asociados")
    conexion.execute("DROP TABLE hospitales")
    conexion.execute("DROP TABLE tipos_contacto")
    conexion.execute("DROP TABLE tratamientos")
    conexion.execute("DROP TABLE ubicaciones")
    conexion.execute("DROP TABLE DB_EXCEL")
    conexion.close()
    return {"message":"Tablas eliminadas correctamente"}

@app.get("/cargarModelo")
async def root():
    await cargartemporal()
    await cargar_independientes()
    await cargar_foraneas()
    return {"message":"CARGADAS TODAS LAS TABLAS"}

@app.get("/cargarTemporal")
async def root():
    await cargartemporal()
    return {"message":"Tabla Temporal Cargada Temporalmente"}

